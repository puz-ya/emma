#pragma once

#include <string>
#include <sstream>
#include <vector>
#include "stdlib.h"
#include  "afx.h"
//---------------------------------------------------------------------------

typedef std::vector<std::string> StringVector;

//---------------------------------------------------------------------------

// [func] split
// [desc] функция для разделения строки на несколько подстрок, следующих друг за другом
//        удобно использовать для передачи нескольких параметров в одной строке
// [p0 +] {string}   s - строка, которую необходимо разбить
// [p1 +] {size_t} max - максимальное число разбиений; 0 = неограничено [default: 0]
// [p2 +] {string}   delims - символы разделяющие подстроки; указываются подряд в одной строке [default: "\t\n "]
// [ret]  возвращает vector<string> - массив подстрок

StringVector split (const std::string& s, size_t max = 0, const std::string& delims = "\t\n ");
//---------------------------------------------------------------------------

// [func] trim
// [desc] функция для обрезки " \t\n" на краях строки
// [p0 +] s - строка, которую необходимо обрезать
// [p1 +] left - обрезать ли слева? [default: true]
// [p2 +] right - обрезать ли справа? [default: true]
// [r] возвращает string - (обрезанную) строку

std::string trim (const std::string& s, bool left = true, bool right = true);
//---------------------------------------------------------------------------

// * функции для преобразования чего угодно в строку
//---------------------------------------------------------------------------

// ** специальные случаи
//---------------------------------------------------------------------------
// добавить, если нужно


// ** преобразование по умолчанию (шаблон)
//---------------------------------------------------------------------------

// [func] allToString
// [desc] функция преобразования T в строку
// [p0 +] T - заранее неопределенный тип (определяется на этапе компиляции)
// [r] если возможно, возвращает string

/*
template <typename T>
std::string allToString(const T& x)
{
		std::stringstream stream;
		stream << x;
		return stream.str();
}
*/

template <typename T>
CString AllToString(const T& x)
{
		std::stringstream stream;
		stream << x;
		CString s = CString(stream.str().c_str());
		return s;
}

// функция преобразует всё в строку
template <typename T>
std::string alltostring2(const T& x)
{
	std::stringstream stream;
	stream << x;
	return stream.str();
}
//---------------------------------------------------------------------------

// * функции для преобразования строки в double, int, bool
//---------------------------------------------------------------------------

// [func] toDouble
// [desc] функция преобразования строки в число типа double
// [p0 +] s - строка для преобразования
// [r] возвращает double

double toDouble (const std::string& s);
//---------------------------------------------------------------------------

// [func] toInt
// [desc] функция преобразования строки в число типа int
// [p0 +] s - строка для преобразования
// [r] возвращает int

int toInt (const std::string& s);
//---------------------------------------------------------------------------

// [func] toBool
// [desc] функция преобразования строки в bool
// [p0 +] s - строка для преобразования
// [r] возвращает bool

bool toBool (const std::string& s);
//---------------------------------------------------------------------------

CString unicode2string(LPCTSTR ustr);